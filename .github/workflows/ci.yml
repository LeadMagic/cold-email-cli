name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        bun-version: [1.1.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Install dependencies
        run: bun install

      - name: Type checking
        run: bun run type-check

      - name: Lint code
        run: bun run lint

      - name: Run tests
        run: bun test

      - name: Test platform health
        run: bun run health

      - name: Test platform shells (smoke test)
        run: |
          timeout 5s bun run smartlead || true
          timeout 5s bun run instantly || true
          timeout 5s bun run apollo || true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.0

      - name: Install dependencies
        run: bun install

      - name: Build CLI
        run: bun run build

      - name: Test built CLI
        run: |
          chmod +x dist/cli.js
          node dist/cli.js platforms
          node dist/cli.js health

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-build-${{ github.sha }}
          path: dist/

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Security audit
        run: bun audit

      - name: Check for known vulnerabilities
        run: |
          # Check for potential security issues in code
          if grep -r "process\.env\." src/ --include="*.ts" --include="*.tsx" | grep -v "SMARTLEAD_API_KEY\|INSTANTLY_API_KEY" | head -5; then
            echo "⚠️ Found potential hardcoded secrets"
          fi

  compatibility:
    name: Node.js Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Build and test with Node.js ${{ matrix.node-version }}
        run: |
          bun run build
          node --version
          node dist/cli.js --help

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README links
        run: |
          # Check for broken internal links in README
          if grep -o '\[.*\](.*\.md)' README.md | while read link; do
            file=$(echo "$link" | sed 's/.*](\(.*\))/\1/')
            if [ ! -f "$file" ]; then
              echo "❌ Broken link: $file"
              exit 1
            fi
          done; then
            echo "✅ All README links are valid"
          fi

      - name: Validate package.json
        run: |
          bun install
          # Check if all platforms mentioned in README exist
          platforms="smartlead instantly apollo salesforge emailbison amplemarket lemlist outreach quickmail salesloft"
          for platform in $platforms; do
            if [ ! -d "src/modules/$platform" ]; then
              echo "❌ Missing platform module: $platform"
              exit 1
            fi
          done
          echo "✅ All platforms have modules" 